{"version":3,"sources":["Header.js","App.js","serviceWorker.js","index.js","assets/unicorn.svg","assets/logo.svg"],"names":["Header","react_default","a","createElement","className","src","logo","alt","App","state","os","width","window","innerWidth","height","innerHeight","hmm","handleWindowSizeChange","_this","setState","platform","family","this","addEventListener","removeEventListener","_this$state","src_Header","href","concat","data-action","react","target","rel","React","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.76406e6e.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './assets/unicorn.svg';\n\nconst Header = () => {\n    return(\n      <div className=\"header\">\n        <img className=\"logo\" src={logo} alt=\"Phonie\"/>\n        <h1>Phonie</h1>\n      </div>\n    )\n}\n\n\nexport default Header;\n","import React from 'react';\nimport platform from 'platform';\nimport Header from './Header';\nimport react from './assets/logo.svg';\n\nclass App extends React.Component {\n  state = {\n    os: '',\n    width: window.innerWidth,\n    height: window.innerHeight,\n    hmm: ''\n  }\n  componentDidMount(){\n    const os = platform.os.family;\n    this.setState({os});\n    window.addEventListener('resize', this.handleWindowSizeChange);\n  }\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleWindowSizeChange);\n  }\n  handleWindowSizeChange = () => {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  };\n  render() {\n    const { os, height, width } = this.state;\n    return (\n      <div>\n        <Header />\n        <div className=\"App\">\n          <div>Hello, <span>{os}</span> user!</div>\n          <div>Your viewport size is <br/>\n          <span className=\"2\">{width}px <small>x</small> {height}px</span></div>\n          <br/> <br/>\n          <a href={`whatsapp://send?text=Brooo i use an ${os} device brooo\\n and its screen resolution is ${width} x ${height} pixels brooooo`} data-action=\"share/whatsapp/share\">Share</a>\n        </div>\n        <p>Built with <img src={react} alt=\"react logo\"/> by <a href=\"https://adithyabhat.com\" target=\"_blank\" rel=\"noopener noreferrer\">Adithya NR</a></p>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/unicorn.be092dda.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}